################################################################################
# Makefile.maintainer.env.dist
#
# This file contains various environment variables that alter the way
# TrinityCore components are built or run. It is designed to be tweaked by a
# maintainer of this project.
#
# This is a template file. In order to use it, copy it to the same directory
# with the `Makefile.maintainer.env` file name.
################################################################################

################################################################################
# SECTION INDEX
#
# ECOSYSTEM CONFIGURATION
#
################################################################################

################################################################################
# ECOSYSTEM CONFIGURATION
################################################################################

# The default docker compose project name should do the job.
# Change this variable value when you want to have concurrent compose project
# running in parallel for whatever reasons.
COMPOSE_PROJECT_NAME := trinitycore-in-docker

# Indicates if we use Docker Desktop or not. Docker desktop forces us to relax
# some constraints regarding docker-in-docker. For instance, it's particularly
# difficult if not almost impossible to run docker within a container with a
# non root user.
# This project has started using docker in a linux environment where such
# difficulty does not exist. This is this variable and of course code
# associated to its interpretation that allow the Docker Desktop support.
# Example: 1
USE_DOCKER_DESKTOP := 1

# Designates the user home directory while the build_servers_and_tools_builder
# docker image is running. This image builds each TrinityCore server image
# using docker-in-docker.
# On Linux, where docker is natively supported, docker-in-docker relies on a
# `docker` user where UID and GUID are taken from the docker host machine.
# Using Docker Desktop is quite different.
# So far, only Docker Desktop for MacOS is supported (with apple silicon,
# though it should also work with intel silicon too).
# Anyway, this variable is set in scripts (those used by maintainer.Makefile)
# so the value set here does not matter.
USER_HOME_DIR := 'platform dependent'

# The URI where to fetch the latest full TDB world database dump archive.
# Usually, this is something you can find in the release section of the
# trinitycore github project. You may have to update this from time to time,
# usually, the lifetime of this archive is several months.
TDB_FULL_URI := https://github.com/TrinityCore/TrinityCore/releases/download/TDB335.23061/TDB_full_world_335.23061_2023_06_14.7z

# The name of the archive file fetched from the TDB_FULL_URI variable. Usually,
# it's the last part of the URI but it might be suceptible to change.
TDB_FULL_ARCHIVE_FILE_NAME := TDB_full_world_335.23061_2023_06_14.7z

# The name of the sql file containing the full world database dump. Usually,
# this is the same name as TDB_FULL_ARCHIVE_FILE_NAME but the extension is sql.
TDB_FULL_SQL_FILE_NAME := TDB_full_world_335.23061_2023_06_14.sql
