#!/bin/env sh

. "${USER_HOME_DIR}/scripts/color.sh"

set_print_blue
cat << EOF
Welcome into the trinitycore-in-docker ide service.
To begin with your development endeavors you can:
EOF

set_print_green
cat << EOF
01. clone the configure TrinityCore repository with:
     'trinitycore_clone.sh' command.
EOF

set_print_purple
cat << EOF
02. use 'neovim' as IDE.
EOF

set_print_green
cat << EOF
03. configure the build with cmake:
     'cmake -G Ninja ...'
   (see official doc or trinitycore-in-docker Dockerfiles for examples)
EOF

set_print_purple
cat << EOF
04. build the whole thing with cmake:
     'cmake --target all --build ...'
   (see official doc or trinitycore-in-docker Dockerfiles for examples)
EOF

set_print_green
cat << EOF
05. install debug version of tools and servers with cmake:
     'cmake --target install --build ...'
   (see official doc or trinitycore-in-docker Dockerfiles for examples)
EOF

set_print_purple
cat << EOF
06. patch configuration file to make them suitable for debugging purposes with
   the following command:
     'trinitycore_patch_conf_in_install_directory.sh'
EOF

set_print_green
cat << EOF
07. start trinitycore-in-docker databases service with the following command:
     'make up service=databases'
EOF

set_print_purple
cat << EOF
08. start the debug version of the build 'worldserver' to create and populate
    databases with default data set.
EOF

set_print_green
cat << EOF
08. Ensure debug databases are created and filled with debug data set with the
    following command:
     'trinitycore_ensure_debug_databases_exist.sh'
EOF

set_print_purple
cat << EOF
09. start your debug versions of servers
EOF

set_print_green
cat << EOF
10. Enjoy the debug environment (lldb + supercharged neovim)
EOF

set_print_blue
cat << EOF
You can display this message of the day at will with the \`motd\` command
EOF

reset_print_color
