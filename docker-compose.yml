version: '3'
services:
  # TODO: include this service in separate yaml file?
  servers_and_tools_builder:
    profiles:
      - build
    init: true
    build:
      context: ./docker.d/servers_and_tools_builder
      dockerfile: servers_and_tools_builder.Dockerfile
      args:
        - DOCKER_GID
        - DOCKER_UID
      tags:
        - ${FQDN}/trinitycore/servers_and_tools_builder:${SERVERS_AND_TOOLS_BUILDER_VERSION}
    environment:
      - SERVERS_AND_TOOLS_BUILDER_IMAGE=${FQDN}/trinitycore/servers_and_tools_builder:${SERVERS_AND_TOOLS_BUILDER_VERSION}
      - AUTHSERVER_IMAGE_TAG=${FQDN}/trinitycore/authserver:${AUTHSERVER_VERSION}
      - WORLDSERVER_IMAGE_TAG=${FQDN}/trinitycore/worldserver:${WORLDSERVER_VERSION}
      - USE_CACHED_CLIENT_DATA=${USE_CACHED_CLIENT_DATA}
      - FQDN=${FQDN}
    entrypoint: /home/docker/servers_and_tools_builder-entrypoint.sh
    network_mode: none
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: ${CLIENT_PATH}
        target: /home/docker/WoW-3.3.5a-12340
      - type: volume
        source: client_data_cache
        target: /home/docker/docker.d/worldserver/data
  databases:
    init: true
    build:
      context: ./docker.d/databases
      dockerfile: databases.Dockerfile
      tags:
        - ${FQDN}/trinitycore/databases:${DATABASES_VERSION}
    entrypoint: /root/scripts/databases-entrypoint.sh
    volumes:
      - type: volume
        source: databases_data
        target: /var/lib/mysql/data
  # worldserver:
  #   init: true
  #   depends_on: database
  #   image: ${FQDN}/trinitycore/worldserver
  #   entrypoint: /home/docker/worldserver-entrypoint.sh
  # authserver:
  #   init: true
  #   depends_on: worldserver
  #   image: ${FQDN}/trinitycore/authserver
  #   entrypoint: /home/docker/authserver-entrypoint.sh
volumes:
  databases_data:
  # TODO: include in separate yaml file if servers_and_tools_builder service is
  # refactored.
  client_data_cache:
